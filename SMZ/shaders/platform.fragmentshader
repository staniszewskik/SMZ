#version 330 core
out vec4 FragColor;

#define CASCADE_COUNT 6
#define JITTER_SAMPLE_COUNT 16

in vec2 texCoord;
in vec3 FragPos;
in vec3 Normal;
in vec4 highlight;
in vec4 FragPosLightSpace[CASCADE_COUNT];
in float ClipSpacePosZ;

#define SHININESS 64
#define SPEC_STRENGTH 0.8
#define BLINN_MUL 4

struct sunLight
{
	vec3 dir;
	vec3 color;
};

uniform sunLight sun;
uniform vec3 viewPos;
uniform vec3 ambient;

uniform vec3 accent;
uniform sampler2D ourTexture;
uniform sampler2D specularMap;
uniform sampler2D normalMap;
uniform sampler1D diffuseLut;

uniform sampler2D depthMap[CASCADE_COUNT];
uniform float cascadeEndClipSpace[CASCADE_COUNT];
uniform vec2 jitterTable[JITTER_SAMPLE_COUNT];

const float shadowSize = 2048.0;
const float texelScale[CASCADE_COUNT] = float[](0.8, 0.8, 0.7, 0.6, 0.3, 0.3);
const float shadowThreshold[CASCADE_COUNT] = float[](0.55, 0.65, 0.7, 0.7, 0.7, 0.5);

float calcShadow(sunLight sun, vec3 normVec, int cascadeIndex, vec4 fragPosLightSpace)
{
	vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
	projCoords = projCoords * 0.5 + 0.5;

	float currentDepth = projCoords.z;
	float bias = (cascadeIndex + 1) * max(0.0002 * (1.0 - dot(normVec, sun.dir)), 0.00002);

	float shadow = 0.0;
	float texelSize = texelScale[cascadeIndex] / shadowSize;
	for(int i = 0; i < JITTER_SAMPLE_COUNT; ++i)
	{
		vec2 pcfCoords = projCoords.xy + jitterTable[i] * texelSize;
		float pcfDepth = 0.0;
		switch(cascadeIndex)
		{
		case 0:
			pcfDepth = textureLod(depthMap[0], pcfCoords, 0.0).r;
			break;
		case 1:
			pcfDepth = textureLod(depthMap[1], pcfCoords, 0.0).r;
			break;
		case 2:
			pcfDepth = textureLod(depthMap[2], pcfCoords, 0.0).r;
			break;
		case 3:
			pcfDepth = textureLod(depthMap[3], pcfCoords, 0.0).r;
			break;
		case 4:
			pcfDepth = textureLod(depthMap[4], pcfCoords, 0.0).r;
			break;
		case 5:
			pcfDepth = textureLod(depthMap[5], pcfCoords, 0.0).r;
			break;
		}
		shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;
	}
	shadow /= float(JITTER_SAMPLE_COUNT);
	shadow = shadow < shadowThreshold[cascadeIndex] ? 0.0 : shadow;

	return shadow;
}

vec3 sampleNormalMap(vec3 normVec);
vec3 calcHighlight(vec4 highlight);

vec3 calcSunDiffuse(sunLight sun, vec3 normVec);
vec3 calcSunSpecular(sunLight sun, vec3 normVec, vec3 viewDir);

void main()
{
	vec3 normVec = normalize(Normal);
	normVec = sampleNormalMap(normVec);
	vec3 sunDiffuse = calcSunDiffuse(sun, normVec);
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 sunSpecular = calcSunSpecular(sun, normVec, viewDir);

	float invShadow = 0.0;
	for(int i = 0; i < CASCADE_COUNT; ++i)
	{
		if(ClipSpacePosZ <= cascadeEndClipSpace[i])
		{
			invShadow = 1.0 - calcShadow(sun, normVec, i, FragPosLightSpace[i]) * 0.8;
			break;
		}
	}
	vec3 highlightValue = calcHighlight(highlight);
	FragColor = vec4((ambient + invShadow * sunDiffuse) * texture(ourTexture, texCoord).rgb * accent +
		invShadow * sunSpecular * texture(specularMap, texCoord).rgb - highlightValue, 1.0);
}

vec3 sampleNormalMap(vec3 normVec)
{
	vec3 v = texture(normalMap, texCoord).rgb;
	v = normalize(v * 2.0 - 1.0);

	vec3 res = vec3(0.0);
	res.x = v.x * (normVec.z + abs(normVec.y)) + v.z * normVec.x;
	res.y = v.y * (abs(normVec.z) + abs(normVec.x)) + v.z * normVec.y;
	res.z = v.z * normVec.z + v.y * -1.0 * normVec.y + v.x * -1.0 * normVec.x;

	return res;
}

vec3 calcHighlight(vec4 highlight)
{
	float minCoord = min(highlight.x, highlight.y);
	minCoord = min(minCoord, highlight.z);
	minCoord = min(minCoord, highlight.w);

	float highlightIntensity = 1.0 - min(minCoord, 1.0);
	highlightIntensity *= 0.5;
	highlightIntensity = pow(highlightIntensity, 5.3);

	return vec3(highlightIntensity);
}

vec3 calcSunDiffuse(sunLight sun, vec3 normVec)
{
	float baseDiffuseValue = max(dot(normVec, -sun.dir), 0.0);
	baseDiffuseValue = textureLod(diffuseLut, baseDiffuseValue, 0.0).r;
	return baseDiffuseValue * sun.color;
}

vec3 calcSunSpecular(sunLight sun, vec3 normVec, vec3 viewDir)
{
	vec3 halfwayDir = normalize(viewDir - sun.dir);
	return pow(max(dot(normVec, halfwayDir), 0.0), SHININESS * BLINN_MUL) * sun.color * SPEC_STRENGTH;
}